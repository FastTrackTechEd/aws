1. Create lamda function that should have ec2 and sns access policies and have timeout of min 1min.


      import boto3
      import botocore
      import json
      import os
       
      APPLICABLE_APIS = ["AuthorizeSecurityGroupIngress", "RevokeSecurityGroupIngress"]
      
      # Specify the required ingress permissions using the same key layout as that provided in the
      # describe_security_group API response and authorize_security_group_ingress/egress API calls.
      
      REQUIRED_PERMISSIONS = [
      {
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 80,
          "UserIdGroupPairs" : [],
          "IpRanges" : [{"CidrIp" : "0.0.0.0/0", "Description": ""}],
          "PrefixListIds" : [],
          "Ipv6Ranges": []
      },
      {
          "IpProtocol" : "tcp",
          "FromPort" : 443,
          "ToPort" : 443,
          "UserIdGroupPairs" : [],
          "IpRanges" : [{"CidrIp" : "0.0.0.0/0", "Description": ""}],
          "PrefixListIds" : [],
          "Ipv6Ranges": []
      }]
      
      
      # evaluate_compliance
      #
      # This is the main compliance evaluation function.
      
      
      
      def evaluate_compliance(event):
          event_name = event["detail"]["eventName"]
          if event_name not in APPLICABLE_APIS:
              print("This rule does not apply for the event ", event_name, ".")
              return
          
          #identify the account and region
          arn=os.environ['arn']
          split_arn=arn.split(":")
          subject="IMP: Security Group is Created/Updated - "+ split_arn[4]+"-"+split_arn[3]
          
          group_id = event["detail"]["requestParameters"]["groupId"]
          print("group id: ", group_id)
      
          client = boto3.client("ec2");
      
          try:
              response = client.describe_security_groups(GroupIds=[group_id])
          except botocore.exceptions.ClientError as e:
              print("describe_security_groups failure on group ", group_id, " .")
              return
              
          print("security group definition: ", json.dumps(response, indent=2))
      
          ip_permissions = response["SecurityGroups"][0]["IpPermissions"]
          authorize_permissions = [perm for perm in REQUIRED_PERMISSIONS if perm not in ip_permissions]
          revoke_permissions = [perm for perm in ip_permissions if perm not in REQUIRED_PERMISSIONS]
      
          if authorize_permissions or revoke_permissions:
              
              if authorize_permissions:
                  for perm in authorize_permissions:
                      print("This permission must be authorized: ", json.dumps(perm, separators=(',',':')))
              if revoke_permissions:
                  for perm in revoke_permissions:
                      send_notification(arn,group_id, subject)
                      print("This permission must be revoked: ", json.dumps(perm, separators=(',',':')))
          else:
              print("All permissions are correct.")
      
      # lambda_handler
      # 
      # This is the main handle for the Lambda function.  AWS Lambda passes the function an event and a context.
      
      def lambda_handler(event, context):
          print("event: ", json.dumps(event))
      
          evaluation = evaluate_compliance(event)
          
      def send_notification(arn, message, subject):
          
          sns_client = boto3.client('sns')
          
          response = sns_client.publish(
              TopicArn=arn,
              Message=message,
              Subject=subject
          )



2. Create an event bride rule with below pattern:

  {
    "detail-type": ["AWS API Call via CloudTrail"],
    "detail": {
      "eventSource": ["ec2.amazonaws.com"],
      "eventName": ["AuthorizeSecurityGroupIngress", "RevokeSecurityGroupIngress"]
    }
  }
3. Associate the lamda as the target
